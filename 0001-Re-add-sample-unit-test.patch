From 3eb553ca6fd5a8fbf8b810da69f6147423d1be9e Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Wed, 1 Mar 2023 00:11:51 +1100
Subject: [PATCH] Re-add sample unit test

---
 client3.py     | 13 +++++++------
 client_test.py | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 54 insertions(+), 6 deletions(-)
 create mode 100644 client_test.py

diff --git a/client3.py b/client3.py
index 3fc09b7..429f3da 100644
--- a/client3.py
+++ b/client3.py
@@ -31,18 +31,17 @@ N = 500
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Average of bid and ask prices
     return stock, bid_price, ask_price, price
 
-
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return float('inf')  # Handle division by zero
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +51,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices ={}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] =price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/client_test.py b/client_test.py
new file mode 100644
index 0000000..cf7ba90
--- /dev/null
+++ b/client_test.py
@@ -0,0 +1,47 @@
+import unittest
+from client3 import getDataPoint
+
+class ClientTest(unittest.TestCase):
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+
+        expected = [
+            ('ABC', 120.48, 121.2, (120.48 + 121.2) / 2),
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
+        ]
+
+        for quote, exp in zip(quotes, expected):
+            self.assertEqual(getDataPoint(quote), exp)
+
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+
+        expected = [
+            ('ABC', 120.48, 119.2, (120.48 + 119.2) / 2),
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
+        ]
+
+        for quote, exp in zip(quotes, expected):
+            self.assertEqual(getDataPoint(quote), exp)
+
+    def test_getDataPoint_noBidPrice(self):
+        quote = {'top_ask': {'price': 100.0, 'size': 50}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': '0.0', 'size': 50}, 'id': '0.109974697771', 'stock': 'XYZ'}
+        self.assertEqual(getDataPoint(quote), ('XYZ', 0.0, 100.0, (0.0 + 100.0) / 2))
+
+    def test_getDataPoint_noAskPrice(self):
+        quote = {'top_ask': {'price': '0.0', 'size': 50}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.0, 'size': 50}, 'id': '0.109974697771', 'stock': 'XYZ'}
+        self.assertEqual(getDataPoint(quote), ('XYZ', 120.0, 0.0, (120.0 + 0.0) / 2))
+
+    def test_getDataPoint_invalidPrice(self):
+        quote = {'top_ask': {'price': 'invalid', 'size': 50}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 'invalid', 'size': 50}, 'id': '0.109974697771', 'stock': 'XYZ'}
+        with self.assertRaises(ValueError):
+            getDataPoint(quote)
+
+if __name__ == '__main__':
+    unittest.main()
-- 
2.41.0.windows.1

